# agents/file_processor.py

import ast
import os

def extract_imports(tree):
    """
    Extracts import statements from an AST tree.
    Returns a set of imported module names.
    """
    imports = set()
    for node in ast.walk(tree):
        if isinstance(node, ast.Import):
            for alias in node.names:
                imports.add(alias.name.split('.')[0])
        elif isinstance(node, ast.ImportFrom):
            if node.module:
                imports.add(node.module.split('.')[0])
    return imports

def extract_functions(tree, source_code):
    """
    Extracts function definitions from the AST tree.
    Returns a list of dictionaries with the function name and raw code snippet.
    """
    functions = []
    for node in ast.walk(tree):
        if isinstance(node, ast.FunctionDef):
            func_name = node.name
            lines = source_code.splitlines()
            start = node.lineno - 1
            end = node.end_lineno if hasattr(node, 'end_lineno') else start + 10
            raw_code = "\n".join(lines[start:end])
            functions.append({
                "function_name": func_name,
                "raw_code": raw_code,
                "description": ""  # To be generated by Deepseek
            })
    return functions

def process_python_file(file_path):
    """
    Processes a single Python file:
    - Extracts the module name, import statements, functions, and full module code.
    """
    module_info = {
        "module_name": os.path.basename(file_path),
        "imports": set(),
        "functions": [],
        "module_code": ""
    }
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            source_code = f.read()
        module_info["module_code"] = source_code
        tree = ast.parse(source_code)
        module_info["imports"] = extract_imports(tree)
        module_info["functions"] = extract_functions(tree, source_code)
    except Exception as e:
        module_info["error"] = str(e)
    return module_info
